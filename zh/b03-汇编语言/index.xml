<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>B01 Java入门 on Hugo 主题的 Learn 文档</title>
    <link>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in B01 Java入门 on Hugo 主题的 Learn 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1 汇编介绍</title>
      <link>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/1-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/1-%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/</guid>
      <description>1 汇编语言的由来 什么是机器语言
# 我们目前主流的电子计算机 状态： 0 和 1 # 最早的程序员，穿孔卡带 加 0100 0000（瞎写的） 减 0100 1000 乘 0100 1000 0100 1000 除 0100 1000 1100 1000 这些复杂的机器语言，能简化吗？
助记符！**汇编语言！**把人类能够理解的语言，用编译器，转换为机器能够理解的语言
加 INC --编译器--&amp;gt; 0100 0000 减 DEC 0100 1000 乘 MUL 0100 1000 0100 1000 除 DIV 0100 1000 1100 1000 汇编一般用于底层的编写，单片机，暴力破解，外挂。。。
 C语言
加 + --编译器--&amp;gt; 0100 0000 减 - 0100 1000乘 * 0100 1000 0100 1000除 / 0100 1000 1100 1000之后才诞生了C++</description>
    </item>
    
    <item>
      <title>2 进制 有符号数 位运算</title>
      <link>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/2-%E8%BF%9B%E5%88%B6-%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0-%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/2-%E8%BF%9B%E5%88%B6-%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0-%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>1 进制 二进制: 0 1111 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 1111 二进制这么去写很麻烦，能否简写？16进制！
0 1 2 3 4 5 6 7 8 9 a b c d e f 为什么学习二进制？
寄存器、内存、位！底层的每一个位都是有含义的，汇编入门理解的基础。
汇编高级：了解程序的深层！操作系统的内核
2 数据宽度 C ，C++，Java 都需要定义数据的类型。计算机底层需要我们给这些数据定义宽度。
   位 bit 0 1     字节 Byte 0-0xFF   字 Word 0-0xFFFF   双字 DWORD 0-0xFFFFFFFF    在计算机中，每一个数据都需要给它定义类型，也就是定义宽度，在内存中的宽度。</description>
    </item>
    
    <item>
      <title>3 汇编学习指南</title>
      <link>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/3-%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/3-%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</guid>
      <description>1 学习指南 通过汇编指令，可以给计算机发一些操作，然后让计算机执行，编译器。如果学底层，千万别用很智能的编译器，底层的大佬几乎都是用最原始的IDE学习汇编的。
 很多人学C，都用linux学C，直接用vim编辑器写C，通过gcc来执行
 学习汇编之前，大家需要先掌握环境配置：
 VC6（写C++的话，建议用 VC6 学汇编，别用Java去学汇编） OD（我爱破解） 抓包工具（学计算机网络的话） 加密解密工具  学完汇编以后，再去学JVM，会觉得很简单
 学汇编不是为了写代码，而是为了理解程序的本质。
 学习资料
《汇编语言》 16位的汇编，但是现在的操作系统都是32位的，或者基于32位的64位
建议直接学习32位汇编！</description>
    </item>
    
    <item>
      <title>4 寄存器 内存</title>
      <link>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/4-%E5%AF%84%E5%AD%98%E5%99%A8-%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://deemopoi.github.io/zh/b03-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/4-%E5%AF%84%E5%AD%98%E5%99%A8-%E5%86%85%E5%AD%98/</guid>
      <description>1 通用寄存器 存储数据：CPU &amp;gt; 内存 &amp;gt; 硬盘
32位CPU 8 16 32
64位CPU 8 16 32 64
通用寄存器，可以存储任意的东西
# 32位的通用寄存器只有8个，存值的范围（0-FFFFFFFF） 计算机如何向寄存器里存值
对于二进制来说，直接修改值
对于汇编，用 mov 指令
mov 存的地址,存的数 （可以将数字写入寄存器） mov 写入地址1,从地址2 （可以将寄存器中的值写到寄存器） 不同的寄存器
FFFFFFFF FFFF FF 0000 0000 32 位 16位 8位 EAX AX AL ECX CX CL EDX DX DL EBX BX BL ESP SP AH ENP NP CH ESI SI DH EDI DI BH 8位：L 低8位， H 高8位 （高8位+低8位，也是16位的状态）
除了这些通用寄存器之外，其他的寄存器每一位都有自己特定的功能。</description>
    </item>
    
  </channel>
</rss>